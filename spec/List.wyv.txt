type Collection
    type E
    def do(f:E -> Unit):Unit
    def add(element:E):Unit
    def addAll(c:Collection[E]):void

type AbstractCollection
    type E
    def addAll(c:Collection[E]):Unit

def makeAbstractCollection[E]():AbstractCollection[E] = new delegator:Collection[E] =>
    def addAll(c:Collection[E]):Unit
        c.do(fn element:E => delegator.add(element))

def makeLinkedList[E]()
    type Link
        type E
        def do(f:E -> Unit):Unit
    val Nil = new Link[E]
        def do(f:E -> Unit):Unit = ()
    def Cons(e:E, n:Link[E]):Link[E] = new
        def do(f:E -> Unit):Unit
            f(e)
            n.do(f)
    new Collection
        delegate val abstractCollection = makeAbstractCollection[E]()
        type E = E
        var first:Link[E] = Nil
        def do(f:E -> Unit):Unit
            first.do(f)
        def add(e:E):Unit
            first = Cons(e, first)