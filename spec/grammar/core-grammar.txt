p ::= e
    | d

type ::= type "->" type  // right-associative
    |    type "*" type   // precedence above ->
    |    "(" type ")"
    |	 ID

typeasc ::= ":" type

d ::= prd | nrd

nrd ::= val p
    |   var p

prd ::= rd prd | rd p

rd ::= "class" ID INDENT objd DEDENT
    |  "type" ID INDENT typd DEDENT
    |  "class" ID NEWLINE
    |  "type" ID NEWLINE
    |  def

namedecl ::= ID | ID typeasc

val ::= "val" namedecl "=" e NEWLINE
    |   "val" namedecl INDENT p DEDENT

def ::= "def" ID params typeasc "=" e NEWLINE
    |   "def" ID params typeasc INDENT p DEDENT

var ::= "var" ID typeasc "=" e NEWLINE
    |   "var" ID typeasc INDENT p DEDENT

params ::= "(" iparams ")"
       |   "(" ")"

iparams ::= ID typeasc | iparams "," ID typeasc

objd ::= objid objd | objid

objid ::= val
      |   var
      |   def
      |	  objcd

objcd ::= "class" def

typd ::= tdef typd | tdef | metadata

tdef ::= "def" ID params typeasc NEWLINE

metadata ::= "metadata" "=" e NEWLINE

//Example, add extensible operators?
e ::= term "+" term
    | term "-" term
    | term "*" term   // precedence above +/-
    | term "/" term   // precedence above +/-

term ::= ID
    | "fn" ID typeasc "=>" e
    | term tuple
    | tuple
    | term "." ID
    | TYPE "." ID
    | term typeasc
    | "ast" "(" e ")"
    | INLINELIT
    | "(" e ")"

tuple ::= "(" it ")"
    |     "("")"
it ::= e | it "," e
