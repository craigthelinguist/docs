p ::= e
    | d NEWLINE p

type ::= type "->" ID
	|    type "*" type
	|    type "|" type
	|    "(" type ")"
	|	 type "." ID
	|	 ID

typeasc ::= ":" type

d ::= "class" ID INDENT objd DEDENT
    | "type" ID INDENT typd DEDENT
    | "class" ID
    | "type" ID
    | val
    | def
    | "var" ID typeasc "=" e
    | "var" ID typeasc "=" INDENT e DEDENT

namedecl ::= ID | ID typeasc

val ::= "val" namedecl "=" e
    |   "val" namedecl "=" INDENT e DEDENT

def ::= "def" ID "(" params ")" typeasc "=" e
    |   "def" ID "(" params ")" typeasc INDENT p DEDENT

tdef ::= "def" ID "(" params ")" typeasc

params  ::= "(" iparams ")"
	|		"(" ")"
	
iparams ::= ID typeasc | iparams "," ID typeasc

metadata ::= "metadata" "=" e

objd ::= objid objd | objid

objid ::=val
	|    def
	|    "class" ID INDENT objd DEDENT 
	|    "type" ID INDENT typd DEDENT

typd ::= typeid typd | typeid
typeid ::=tdef
	|	  metadata

//Example, add extensible operators?
e ::= mul | mul "+" e | mul "-" e
mul ::= term | term "*" mul | term "/" mul

term ::= ID
	| "fn" ID typeasc "=>" e
	| term tuple
	| tuple
	| term "." ID
	| TYPE "." ID
	| term typeasc
	| "valAST" "(" e ")"
	| TYPE "." "metadata"
	| inlinelit

tuple ::= "(" it ")"
	| 	  "("")"
it ::= e | it "," e 