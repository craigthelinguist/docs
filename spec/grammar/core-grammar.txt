p ::= e
    | d

type ::= type "->" type
	|    type "*" type
	|    "(" type ")"
	|	 ID

typeasc ::= ":" type

d ::= prd | nrd

nrd ::= val NEWLINE p
    |   var NEWLINE p

prd ::= rd prd | rd p

rd ::= "class" ID INDENT objd DEDENT
    |  "type" ID INDENT typd DEDENT
    |  "class" ID NEWLINE
    |  "type" ID NEWLINE
    |  def

namedecl ::= ID | ID typeasc

val ::= "val" namedecl "=" e
    |   "val" namedecl INDENT p DEDENT

def ::= "def" ID params typeasc "=" e
    |   "def" ID params typeasc INDENT p DEDENT

var ::= "var" ID typeasc "=" e
    |   "var" ID typeasc INDENT p DEDENT

params  ::= "(" iparams ")"
	|		"(" ")"

iparams ::= ID typeasc | iparams "," ID typeasc

objd ::= objid objd | objid

objid ::=val
	|    var
	|    def
	|	 objcd

objcd ::= "class" def

typd ::= tdef typd | tdef | metadata

tdef ::= "def" ID params typeasc

metadata ::= "metadata" "=" e

//Example, add extensible operators?
e ::= term "+" e
	| term "-" e
	| term "*" e
	| term "/" e

term ::= ID
	| "fn" ID typeasc "=>" e
	| term tuple
	| tuple
	| term "." ID
	| TYPE "." ID
	| term typeasc
	| "valAST" "(" e ")"
	| inlinelit

tuple ::= "(" it ")"
	| 	  "("")"
it ::= e | it "," e 