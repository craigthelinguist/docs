Wyvern design notes
 * Dynamic: look at Dart's philosophy
 * Structural types: do our structural types allow a link to documentation?
	c.f. "message-safe" in Dart
	ordered records (as arguments or results) are the only truly structural type
		tuples are bad: no name to know what each element is
	paper: calculus that shows how this all works
		statically, and at run time!
		always a representation of generics
 * Use for teaching: see Mark Lewis's Scala keynote
	also see Grace's design philosophy
 * Idea (capabilities and concurrency)
	all unsafe concurrency libraries are capabilities
	tricky: want a safe library to be instantiatable w/o passing the unsafe
		library (on which it is built) as a capability
	 - the library asks for trust, so it doesn't have to be a resource
	 - the main program has to trust it
		this could happen in the implicitly imported standard library
		if the main program doesn't trust it, what do we do?
 * Look at "for comprehensions" in Scala
	use in collections
	use for futures, etc. - see Kotelnikov paper at Scala 2014
 * Challenge: express Scala.workflow in Wyvern (see Kotelnikov paper at Scala2014)
	also Akka, Play - perhaps ScalaTest, Specs
	issues: metaprogramming, generics, reuse (traits/delegation)
	maybe react too - see other Scala2014 paper
 * Another challenge: implement some CRDTs on a distributed framework
 * Are implicits an alternative to inheritance?  Mentioned as such in last Scala 2014 talk.  But things differ: each implicit var is introduced explicitly and used implicity, whereas in inheritance variables are introduced implicitly and used explicitly.  Being explicit about use is more important.