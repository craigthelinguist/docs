Capabilities vs. ACLs
	- evolution of access relationships over time is critical; this is the primary way they differ
	- designation is critical.  ACLs inevitably separate designation from authority.  Capabilities unify them.
		"No Designation without Authority" - property of the capability model, cannot be a property of any ACL model
			impacts confused deputy problem
	- ACLs need to refer to subjects.  If subjects come and go, this is difficult.
		leads ACLs to avoid fine-grained access control.
		Property: Dynamic Subject Creation (of capabilities, but typically not of ACL systems)
			impacts principle of least privilege

For Friday
==========
			
Wyvern Module System Contribution
	Paper #1:
		** Reconciling module imports with a capability-based language at a low overhead
		** A new application of capabilities to architectural control
			[Theory?]
	Paper #2:
		A new type-based technique for reasoning about object capabilities
			[Theory optional]
		A new type system for reasoning about capability use.  Several things we could do:
			* Track the presence of a capability (novel, easy, likely useful)
			* Track particular capabilities (but capabilities are dynamic in general, so only an approximation, likely useful)
			* Track "only access X through Y" (novel, more difficult, not dynamic, likely useful)
			[Theory required]
		Static reasoning about effects in the presence of composition
			aggregate one capability within another - hide use of the internal capability
			example:
			FFI
				f:tau_1 -> tau_2 + T
			IO requires FFI
				write: STring -> ()+FFI
			Logger requires IO
				log: string -> () + IO
			A (users Logger)
			
			> could do this at a module-by-module level
				very approximate but very simple
	Paper #3: The human side of architectural control (from IWACO)

Validation
	Write several programs illustrating confinement of different architectural resources
	Also illustrate a plug-in architecture where plugins are allowed access to limited resources

Example
	Execution service that provides 
	Map-reduce service that 
	Darya: web page mashup (similar to in Chong's paper)
		refer back to OWASP principles
			show how principles can be addressed via architectural control
				e.g. security misconfiguration and direct object references
				
For next week: Darya will write (ideally by Wednesday, for sure by Friday's meeting)
	text to explain what we want to do
	code example
