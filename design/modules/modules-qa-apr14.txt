Q: Suppose we have the following code

module A
class Foo
class Foo

Should an external language be able to see both Foos, with one renamed, or should only, say, the last one be visible?

A: Let's prohibit multiple declarations in the same scope with the same name.  A name in an inner scope can still shadow a name in an outer scope.


Q: Also, I am still unclear about what the module names actually mean. Suppose you have the modules A and D, and in a file, you import both of them through some method. Do you get A and D (themselves) in scope, so you would, say, call A.foo(), or do they bind directly into the context, so just foo() would be valid.

A: You get A and D in scope, so you have to use A.foo() to call foo() from module A.

> If we use the first approach, the issue of inner classes and types shows up again, and it could become quite verbose if we had nested modules.

It shouldn't be more verbose.  If we have a module B nested within A, then you can import A.B and then call B.foo() without mentioning A.

> In contrast, the second approach is much messier, but avoids many of these issues.

The messiness actually can cause serious development problems during software evolution, which is why Go chose the first approach.

> Another way out would be to have an import statement that specified how to bind the imported elements, which is similar to how we were doing it before.

Yes, I don't mind the second approach if the programmer explicitly requests it, and if the interface of the module is versioned so that adding things to the module doesn't break things.

> Lastly, the issue of nested modules comes up. It would be nice to have some way of putting a module inside another module, but we don't appear to have any semantics for it.

Yes, let's figure that out....