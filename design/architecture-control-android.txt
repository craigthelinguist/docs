Guidelines/enforcement in Android applications
==============================================

Distinguish internal from external usage of intents
 - architecture does this more explicitly than a framework could, at least without duplicating code or creating an architecture-like declarative specification
 
Avoid accidentally exposing components
 - architecture can do this more explicitly than a framework could - interesting to look at how (considering dynamic registration, and how Android ties these together)

Check sender on system events
 - really a framework design issue: want this to be the default for system-defined events
 - architecture could help: system component exists by default and you just connect to it.  Use system-defined events in any other way is difficult.

Use explicit addresses when intended
 - two different connection types; make explicit easier/more natural, and/or require explicit to specify that any receiver can be used

*** What to do about privilege escalation?  e.g. "good" app can receive a message that results in placing a call.
 - the "good" app has a vulnerability if another app can control the phone # (or maybe even if not)
 - can we leverage capabilities?
   - explicit use or assertion of the capability might help the programmer think about what he/she is doing
     - perhaps if the intent caller does not have the permission, the callee has to assert it even more explicitly than otherwise - this would probably help a lot
   - would like phone number to not be from an intent that could come from another application - "tainted"