# Declare the language of this file is the webapp language
# essentially we are importing a TSL from a URL and using it
# for the rest of the file.
#
# But we are using the lang construct, which allows the webapp
# language to control not just the syntax, but also the
# compilation strategy.

lang http://wyvern.org/wyvern/webapp


# declare an interface

# define persistent data (page and server object below are ephemeral)

# define a page
# link the page to the remote interface above, allowing code to access it
# properties of remote interface include protocol (HTTPS), etc.

# define the server object accessed via the interface


(*
OBSERVATIONS
 - // is bad for comments, if w have URLs in the language
 - don't need a full architecture for web app fwk,
	because the whole point is that many architectural choices are fixed for you
	by the fwk
 - still the web app arch would be a special case
	still want another example that shows general architectures
	and explains why they are useful
	-> and do this for different architecture types
 - what is above is essentially a bunch of properties
	Can we avoid a custom DSL and just use Wyvern,
	but with a compilation strategy for deployment purposes?
	maybe the compilation strategy also does some extra checking
		but the syntax is unchanged

*)