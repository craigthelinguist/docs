IWACO SUBMISSION
================


Language-Based Architectural Control


ABSTRACT

Software architects design systems to achieve certain quality attributes, such as security, reliability, and performance.  Key to achieving these quality attributes are design constraints on communication, resource use, and configuration of components within the system.  Unfortunately, in practice it is easy to omit or mis-specify important constraints, and it is difficult to ensure that specified constraints are also enforced.

Architectural control is the ability of software architects to ensure that they have identified, specified, and enforced design constraints that are sufficient for the system's implementation to meet its goals.  We argue that programming languages, type systems, and frameworks can help achieve architectural control in practice.  The approach we envision leverages frameworks that fix or expose the important architectural constraints of a domain; language support that allows the framework to centralize the specification of those constraints so they are under the architect's intellectual control, and type systems that enforce the constraints specified by the architect.  We sketch an approach to architectural control in the context of distributed systems.


OUTLINE

1. Architectural Control

The problem of achieving quality attributes, and of specifying and enforcing appropriate constraints.  Some examples of constraints, and examples of failing to remember or enforce them.

Architectural Control.  The definition and concept of architectural control.  Why it is important.  Why it is hard to achieve in practice (including concrete examples).  SE concept that involves people (example), but one that languages can help to achieve.

Achieving Architectural Control.  Elements that are necessary to achieve architectural control.  Why each element is important.  Include discussion of productivity--would like to get benefits of architectural control while minimizing productivity sacrifice, or even enhancing productivity

Overview and outline of the rest of the paper

2. Prior work.

Various prior work and its relationship to architectural control.  The limitations of prior approaches and the need for research.  Include:
 * Software architecture.  ArchJava, including distributed system paper.  Other work in architectural enforcement.
 * Ownership and alias control
 * Functional programming
 * Permissions and Effects
 * Capability systems; why types are useful
 
While we are not aware of prior use of the phrase architectural control
in scientific literature, IBM Rational uses "architectural control rules"
to constrain dependencies in Java applications.  See http://publib.boulder.ibm.com/infocenter/rsdvhelp/v6r0m1/index.jsp?topic=%2Fcom.ibm.r2a.structanal.doc%2Ftopics%2Fcarchcontrols.html
Our use of the term architectural control is broader, encompassing....

The phrase architectural controls was used in the urban planning
literature at least as early as 1949 to refer to "control over the
design and appearance of buildings," with the goal of making a
community more beautiful or livable [1].

[1] Architectural Controls.  American Society of Planning Officials Information Report No. 6, September 1949.  Available at http://www.planning.org/pas/at60/report6.htm


3. Architecture-Exposing Languages and Frameworks.

Illustration of the approach.  Four technical aspects that can help, and how they work together.  Example-driven.

EXAMPLES driving approach
 - DLSs: arch fwk that makes net interfaces, protocols explicit
 - Capabilities - allows arch fwk to enforce constraints on net use
 - Architectural layering - build web fwk on top of arch fwk, show another layer?  not sure if this is concrete enough to describe
 - ADTs (with DSLs): structured SQL queries and HTML pages


3.1. Language Extensibility

Problem, example and explanation.

3.2. Capabilities

Problem, example and explanation.

3.3. Architectural Layering

Problem, example and explanation.

3.4 Abstract Data Types

Problem, example and explanation.

4. The Path Forward: A Research Agenda.

What we need to do to make this happen.