Dear Alex,
we are happy to announce that your paper

Language-Based Architectural Control

has been accepted to IWACO 2014.
We'd like to thank you for submitting your work to the workshop!
The reviews of your paper are appended below. Please follow the reviewers' suggestions for improving 
your paper for the final version, which is due July 5.

We look forward to seeing you in Uppsala and hearing your presentation!
Regards,
Johan Ã–stlund & Stephanie Balzer (chairs)


----------------------- REVIEW 1 ---------------------
PAPER: 6
TITLE: Language-Based Architectural Control
AUTHORS: Jonathan Aldrich, Cyrus Omar, Alex Potanin and Du Li

OVERALL EVALUATION: 1 (weak accept)
REVIEWER'S CONFIDENCE: 4 (high)

----------- REVIEW -----------
This paper is a sketch of an idea about adding architectural constraints to a language.  I like the general idea, so would argue we should include the paper in a workshop like IWACO.  I do have some comments that the authors might consider, and which I offer as feedback on the ideas:

It wasn't quite clear to me what you mean by "access".  For instance, if component X is the one that directly accesses the network, and component Y invokes component X, does Y "access the network"?  This is something that Haskell's design captures because Y can't invoke say, an IO computation without itself being lifted into the IO monad.  That is, monads poison the whole computation, but this can be a good thing when I want to identify all of the potential paths to communication.  

You might consider type-and-effect systems as an alternative to monads as a more lightweight way to track a system of well-known effects.  See for instance, the original FX papers (Gifford and Lucasson) or more recent work by e.g., Edwin Brady for Idriss.  

You might consider *anti* framing as a more useful notion.  For example, I may wish to say that component Y should not be able to access the network.  Indeed, I've often thought that in many contexts, we'd like to have simple sandboxing primitives that prevent a component from doing any external communication---that can make analysis of the system much easier.  A pure Haskell function has that kind of property (but only if we sandbox it against things like UnsafePerformIO or a type-cast or ...)  

You might also consider co-monads as a better match for what you're talking about in terms of capability-based computations.  See for instance, Aleks Nanevski's PhD thesis.  

I was also wondering whether you saw the capabilities for accessing a resource as first-class values that could be incorporated into objects, or static, second-class things.  The former re-introduces all of the "confused deputy" problems (aliasing, escaping, etc.) and forces me to do a flow analysis to figure out whether a component can gain access to a capability.  But the latter is often too restrictive (e.g., component Y calls needs to log something, and the Logging component needs to access the network.)  

A few typos:

p2:  "Ensuring that this constraint if followed" -> "Ensuring this constraint is followed"

p3:  "controling" -> "controlling"

p7: "invovked" -> "invoked"

p7:  It's bad practice to use numeric citation numbers e.g., [4,14] as subjects in a sentence.  Use the authors' names or the project's name, or whatever.   This helps a reader from having to flip back to the citations to understand the sentence.


----------------------- REVIEW 2 ---------------------
PAPER: 6
TITLE: Language-Based Architectural Control
AUTHORS: Jonathan Aldrich, Cyrus Omar, Alex Potanin and Du Li

OVERALL EVALUATION: 2 (accept)
REVIEWER'S CONFIDENCE: 3 (medium)

----------- REVIEW -----------
This paper proposes language-based architectural control, which is the process of 
specifying and enforcing system-wide constraints related to security, reliability 
and performance. The paper rightfully posits that architectural control is difficult 
given current mechanisms and programming languages, and proceeds to outline several 
ideas --- delegation plus specification and enforcement through mechanisms such as 
static types, permissions and capabilities. The proposed work will build upon ArchJava, 
which had a way to specify some architectural concerns but did not have a way to verify 
that those concerns are met. One novelty (to the best of my knowledge) is delegation 
where the human element is explicitly factored in (and somehow checked) within the language.

Overall, there isn't much concrete detail in the paper, the description is high-level and 
has the feel of a research proposal. Nevertheless, I think the paper will give rise to a 
fruitful discussion at the workshop and I support acceptance of the paper.


----------------------- REVIEW 3 ---------------------
PAPER: 6
TITLE: Language-Based Architectural Control
AUTHORS: Jonathan Aldrich, Cyrus Omar, Alex Potanin and Du Li

OVERALL EVALUATION: 3 (strong accept)
REVIEWER'S CONFIDENCE: 4 (high)

----------- REVIEW -----------
This is a really cool paper.  Exactly what I expect from a IWACO paper: it highlights a problem domain and give some hints at  possible solutions.  

The paper is concern with making software architecture explicit.  Usually they are implicit in the design of a system, with principles that written down in high-level documents, but not always maintained at the implementation level.  The paper makes the point that it would be desirable to find a solution that provides some enforcement of the architecture, but perhaps stops short of a full-fledged type system as that may be too restrictive.

The authors are thinking about this in the context of the programming language Wyvern that they are developing. Some examples are given.
