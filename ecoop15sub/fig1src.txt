Java: Collectors.reducing(new LinkedList<Integer>(), (la,lb) -> (List<Integer>)la)
Error:
	Error:(264, 36) java: incompatible types: cannot infer type-variable(s) T
    (argument mismatch; bad return type in lambda expression
      java.util.List<java.lang.Integer> cannot be converted to java.util.LinkedList<java.lang.Integer>)

Scala:List.range(1,100).foldLeft(None)((o,num)=>Some)
Error: 
    type mismatch;
	 found   : Some.type
	 required: None.type
    List.range(1,100).foldLeft(None)((o,num)=>Some)
                                              ^

C#:   Enumerable.Range(1,10).Aggregate(new LinkedList<int>(), (llst,num) => (List<int>)llst)
Error:
	Cannot convert type 'System.Collections.Generic.LinkedList<int>' to 'System.Collections.Generic.List<int>'`

F#:   open System.Collections.Generic
	  let sumList list = List.fold (fun acc elem -> List<int> acc) (new LinkedList<int>()) list
Error:
	Error: A unique overload for method 'List`1' could not be determined based on type information prior to this program point. A type annotation may be needed. 
	Candidates: 
		List(capacity: int) : unit, 
		List(collection: IEnumerable<int>) : unit