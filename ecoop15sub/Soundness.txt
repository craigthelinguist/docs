Soundness
----------

Theorem (soundness of instantiation):
Given D |-> Om and a^ not in FV(A)
   G |- a^ <:= A -| D => [Om]D |- [Om]a^ <= [Om]A
   G |- A <=: a^ -| D => [Om]D |- [Om]A <= [Om]a^
   G |- <{b^1, ...,b^n},tau> <:== tau' -| D => 
     Om[D] |- [Om]tau <= [Om]tau'
   ibid for <==: and the others
   G |- sig_u \/ tau = <{b^1, ...,b^n},tau'>  -| D => 
     [Om]D |- [Om]tau'<= [Om]tau

Proceed by mutual rule induction over instantiation, bounding, bound instantiation, and glb/lub (R/L).


Rule InstLAbs
Apply IH to Th |- sig_u \/ tau = <{b^1,...,b^n},tau'> -| D => 
     [Om]D |- [Om]b^1 <= [Om]tau
     ...
     [Om]D |- [Om]b^n <= [Om]tau
     [Om]D |- [Om]tau'<= [Om]tau
D,sig_l<:a^<:<{b^1,...,b^n},tau'>,G'=D'' |-> Om, [Om]a^ = tau'' => 
  D |- tau'' :<< <{b^1,...,b^n},tau'> -| D'
=>  [Om]D' |- [Om]tau'' <= [Om]tau'
=>  [Om]D' |- [Om]a^ <= [Om]tau
=>  [Om]D''|- [Om]a^ <= [Om]tau

Rule InstLVar
D,sig_l <: a^ <: <{b^,r},c>,G'=D'' |-> Om => D |- a^ :<< <{b^,r},c> -| D', D' |-> Om
=> [Om] D' |- [Om]a^ <= [Om]b^
=> [Om] D''|- [Om]a^ <= [Om]b^

Rule InstLReach
...

Rule InstLArrow
Headhurt

Rule InstLAIIL
See Dunfield.


WTS:
G |- A <: B -| D => G hook D
G |- a^ <:= A -| D => G hook D
G |- A <=: a^ -| D => G hook D
G |- sig_l :<< tau -| D => G hook D
G |- tau <<: sig_u -| D => G hook D
G |- sig_l <==: a^ -| D => G hook D
G |- a^ <:== sig_u -| D => G hook D
G |- sig_u \/ tau = sig_u' -| D => G hook D
G |- sig_l /\ tau = sig_l' -| D => G hook D

Pf:
	Subtyping:
		<:Var
		  Duh.
		<:Unit
		  Duh.
		<:Exvar
		  Duh.
		<:Arrow
		  G |- B1 <: A1 -| Th => G hook Th
		  Th|- A2 <: B2 -| D => Th hook D
		  => G hook D (trans)
		<:Forall L,R by IH Duh.
		<:InstantiateL/R
		  By IH duh.
	Instantiation
		InstLAbs:
			G hook Th
			Th hook D
			G hook D
			G' hook G'
			D |- tau' <<: sig_u' -| Th''
			=> G |- tau' <<: sig_u' -| Th', Th' |-> Om (as G hook D)
		InstLVar:
			G hook D
			G' hook G'
			...
	Rest of cases boring - do later (Coq?)


WTS:
Given Th hook Th':
G |- <{a^1,...,a^n},tau'> <<: tau -| Th => Th' |- <{a^1,...,a^n},tau'> <<: tau -| D
G |- tau' <: tau -| Th => Th' |- tau' <: tau -| D
G |- tau

Pf:
---
Th hook Th' => forall Om: Th' |-> Om, Th |-> Om

Rule induction
<:Var
  Th[a] hook Th' => Th'[a]
  Th'[a] |- a <: a -| Th'[a]
<:Unit
  Duh.
<:Exvar
  See var
<:Arrow
  Th' |- B1 <: A1 -| Th'' (By IH on Th hook Th')
  Th_i |- A2 <: B2 -| Th_i' (ibid)
<:forallL/R
  Th hook Th,m_a^,a^ => ... (by IH)
...

Hook Trans:
G hook T
T hook D
WTS G hook D

Pf
Case HookConstrain
G = G',s_l<:^a<:s_t
T = T',<_, s_tl> <: ^a <: <_, s_tt>
D = D',<_, s_dl> <: ^a <: <_, s_dt>
G |- s_l :<< s_tt -| Th_a
T |- <_,s_tl> :<< s_dt -| Th_b

Wts: G |- s_l :<< s_dt -| Th_c



WTS:
G |- A <: B -| D => G hook D
G |- a^ <:= A -| D => G hook D
G |- A <=: a^ -| D => G hook D
G |- sig_l :<< tau -| D => G hook D
G |- tau <<: sig_u -| D => G hook D
G |- sig_l <==: a^ -| D => G hook D
G |- a^ <:== sig_u -| D => G hook D
G |- sig_u \/ tau = sig_u' -| D => G hook D
G |- sig_l /\ tau = sig_l' -| D => G hook D

and

Given Th hook Th':
G |- <{a^1,...,a^n},tau'> <<: tau -| Th => Th' |- <{a^1,...,a^n},tau'> <<: tau -| D
G |- tau' <: tau -| Th => Th' |- tau' <: tau -| D
...

Pf:
Proceed by rule induction on the lhs of the implication
 Case: InstLAbs
