#wyvern #modules #core

Notes on Odersky 2014
	Argument in section 3.3 is compelling
		weird if we can't use S <: x.L and x.L <: T to imply that S <: T,
		since subtyping should clearly be transitive,
		but it's not sound to do this unless the lower bound always <: upper bound
		for type members
		*** although, if we make sure at run time that we actually have an x
			(it isn't just something we can pretend doesn't exist) then
			everything will work out in practice!
			<but figuring out how to soundly leverage this may be difficult>
	Do we need environmental narrowing?
		if the small-step semantics never substitutes, it may not be necessary
		why does the proof of subtyping transitivity require environmental narrowing?
			A: because the Rec <: Rec rule uses the assumptions from the LHS
				when checking the declarations for subtyping
			Q: but what if we used a double-headed rule right here?
				This is discussed in section 7, rule (A)
				***They say it gives up nominality, which I don't fully understand
					(partly because I don't see all their rules)
					
Can we make a viable core calculus with:
	type members (with no bounds)
	paths
	intersection (not sure we need this, but could partly substitute for bounds)

	does all of this help us reuse delegation code in interesting situations?
	what if we had bounded polymorphism, but only for functions, not for type members?
		unpleasantly builds in 2 things instead of one
		but if it works, it might be worth it

Interesting issues
	had to go to big-step semantics
	