%In order to support polymorphic functions, we need to late-bind types.  This means (A) a construct to define an object with a type member left abstract, (B) a construct to bind the abstract type member, and (C) a way of representing partially abstract objects in the type system.  Optionally, we can allow regular members to be left abstract also. 

%Or, if we don't want to bite off abstract type members right now, we can just add (possibly bounded) polymorphism.  We will likely want abstract type members later for modules, though...and we will likely want abstract members both for modules and for "assign-once" uses (e.g. open recursion with delegation).

%Type stacking as a substitute for type members?  But doesn't help with abstract type members, unless we can stack a forall (vs. an exists)?

