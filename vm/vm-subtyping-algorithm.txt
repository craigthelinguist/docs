Subtyping algorithm

First, canonicalize both types to the form \tau { \overbar{\sigma}}
		with \tau = \top or p.L for a p.L that is abstract or tagged
	\top becomes \top {}
	\tau { \overbar{\sigma}}:
		we recursively expand \tau, capturing the refinement sigmas
			until getting \top or a p.L that is abstract or tagged
			if tagged, we keep extracting the sigma parts recursively
				until we get to \top or a p.L that is abstract
				but we leave the tagged p.L in place
		then we merge all the sigmas into one, with later ones overriding
	p.L - treat as p.L {} and do as described above

now we have \tau1 { \overbar{\sigma1} } <: \tau2 { \overbar{\sigma2} }
	first we verify that \tau2 = top
		or \tau1 = \tau2 (identical abstract types)
	second we do the normal subtyping test for sigma1/sigma2
		(but memoize queries to solve recursion)