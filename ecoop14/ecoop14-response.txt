We thank the referees for their insightful comments (and for catching a number of typos!)

R1, R2
The presented design was informed by previous attempts to implement a more complicated mechanism.  While a preliminary implementation of our approach handles very simple examples, we are refactoring it for simplicity and fidelity to the paper.  We anticipate having an implementation of Wyvern supporting TSLs available for download by the conference date. 

R1, R3, R4
We have already revised the paper to provide a more detailed proof sketch of the consistency theorem, along with minor technical corrections (https://github.com/wyvernlang/docs/blob/master/ecoop14/ecoop14.pdf) Along with the final version, we will publish a technical report with a complete semantics and proofs of the consistency and type safety theorems. 

R1
Forward references allow portions of an expression that are likely to span multiple lines to be placed in the next indented block, rather than inline. The sentence about the "let rule" simply states, admittedly awkwardly, that forward references are only present in the concrete syntax (Fig. 5).

valAST does not marshal a value from compile-time to run-time, it only turns a value into an AST within the same phase. In a language with external effects, one would certainly have to be careful about capturing state that would no longer be meaningful at run-time. We will discuss this and Flatt's related work in the final version.

R2
Saying "the idea...is not actually new" may be an oversimplification. The AOSD2014 paper has not yet been published, nor is it available online as of this writing, and the review periods of the two conferences overlap.  Furthermore, in our 2013 workshop paper, published before AOSD submissions, we already proposed associating parsers with types (as cited in Sec. 1) but without important design details.  In the final version of our paper, we will include a more detailed comparison to the simultaneous AOSD submission, once it is available.

R3
Our use of "interpolation" comes from widely used term "string interpolation", which can be seen as a special case of our mechanism.

R4
Non-termination is a possible effect, yes. We will clarify this in Sec. 1. 

Desugaring can introduce new variables (and indeed our TSL for Exp intentionally uses this). This does, as R4 notes, also allow for unintentional shadowing. We are evaluating an alternative design where this is not possible and values are passed in only via function application.

Attacks based on exploiting string concatenation can still occur if an underlying string-based representation is used (e.g. in a field) AND interpolation is implemented incorrectly. Such representations are less tempting when TSLs are available. We will clarify this point.