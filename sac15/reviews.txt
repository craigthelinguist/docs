
Title: Composable and Hygienic Typed Syntax Macros

Authors: Cyrus Omar, Chenglong Wang and Jonathan Aldrich
============================================================================
                            REVIEWER #1
============================================================================


---------------------------------------------------------------------------
Reviewer's Scores
---------------------------------------------------------------------------

          Technical Content and Accuracy: 6
                Significance of the Work: 5
Appropriate Title, Introduction, and Conclusion: 5
                    Overall Organization: 3
                 Appropriateness for SAC: 6
          Style and Clarity of the Paper: 3
                  Originality of Content: 6
                  OVERALL RECOMMENDATION: 5


---------------------------------------------------------------------------
Comments
---------------------------------------------------------------------------

This paper presents Typed Syntax Macros (TSMs); an extension to
existing work on Type Specific Languages which provides additional
flexibility of syntactic sugaring while still retaining
composability and hygiene. TSMs allow introducing new syntactic
forms to existing (possibly unmodifiable) Type Specific Languages,
and can also be used to declare types. There are also novel
techniques for delimiting syntactic sugar.

I think the technical contribution of this paper is strong, and
there are clear and useful applications of TSMs (if you have a
language that supports Type Specific Languages). My biggest
concern is the disposition and presentation. The paper is heavy
with formalism, and still a lot is left out with citations of
other papers. It seems very hard to get a good overview of the
formal details without first reading about earlier work.

For such a short paper, it would have made more sense to spend
more time on the practical details (sections 3 and 4) and present
the formalism on a higher level, and then refer to a technical
report for all the details. That there's no conclusion also leaves
the reader (still dazzled by the formalism) unsure of what was
important in the paper.

Minor issues:

* There are some unfortunate hyphenations: "T-SLs", "hygien-e",
  "HTM-L", "specification-s", "for-m"

* The word "dform" renders badly in math font

* The acronyms TSM and TSL suggest that the "TS" part are the same
(even though they're not). This is a little distracting,
especially early in the paper.

* The colored text was hard to read when printed in black and white.

============================================================================
                            REVIEWER #2
============================================================================


---------------------------------------------------------------------------
Reviewer's Scores
---------------------------------------------------------------------------

          Technical Content and Accuracy: 4
                Significance of the Work: 4
Appropriate Title, Introduction, and Conclusion: 3
                    Overall Organization: 3
                 Appropriateness for SAC: 4
          Style and Clarity of the Paper: 3
                  Originality of Content: 4
                  OVERALL RECOMMENDATION: 3


---------------------------------------------------------------------------
Comments
---------------------------------------------------------------------------

Offering a language syntax extension mechanism that may be composed, be
hygienic, and support statically checkable is a difficult problem.
The paper presents typed syntax macros, to address limitations of
typed-specific languages.
This macro mechanism has been demonstrated in a variant of the Wysern
programming language support

-= general comments =-
Since I am not expert in the field, my review is superficial on some parts of
the paper.
Your approach associates metadata to typed syntax macros. This is interesting.
But I feel that the notion of metadata is rather weak. What a metadata is made
of? In all your example, metadata is used to define the parser generator. Can
it be defined for something else than parsing? This exclusive use seems to
reveal something hidden behind your generic term “metadata”. At the first
read, I thought you used the metadata to keep information for debugging, which
is usually a difficulty with macro expansions.

I would be curious to see how does your technique apply to create domain
specific languages. It seems to address common difficulties of the field.

-= detailed comments =-
Section 1 does not explicitly enumerate the contributions of the paper. It is
hard to understand what makes the paper new and innovative. Por example, the
section begins with a description of the challenge in support a language
extension (i.e., composability, hygiene, typing discipline). Subsequent
paragraphs (i.e., begining with “Most prior approaches…” and “While
many forms…”) kind of blurry the contributions by mixing with related work.
My advice is to have a bullet lists with the explicit contributions. Doing so
significantly raises the quality of the paper.

Section 3.1 says that applying a TSL application does not use parenthesis. Why
this?
"Notice here that on line 7” => of which figure? 3 or 4? The previous
paragraphs  discuss about Figure 4 and then Figure 3. Reading afterward
indicates we are discussing about Figure 4.

No conclusion section is provided. I would have preferred one instead of the
lengthy technical description given at the end of the paper.

============================================================================
                            REVIEWER #3
============================================================================


---------------------------------------------------------------------------
Reviewer's Scores
---------------------------------------------------------------------------

          Technical Content and Accuracy: 6
                Significance of the Work: 5
Appropriate Title, Introduction, and Conclusion: 7
                    Overall Organization: 6
                 Appropriateness for SAC: 7
          Style and Clarity of the Paper: 7
                  Originality of Content: 6
                  OVERALL RECOMMENDATION: 7


---------------------------------------------------------------------------
Comments
---------------------------------------------------------------------------

This work expands over the power of TSL that I already knew and appreciate.
This work present three kind of extensions:
Synthetic TSM, Analytic TSM and type level TSM.
I have some doubts on the need of  Synthetic and Analytic TSM, while I
understand the need for the
last kinds.

A named type can have a single parser in its metadata,
conceptually such parser is a function "code"-->T.
Synthetic TSM allows to separe the tight connection between the type and his
parser.
Conceptually a Synthetic TSM is another function "code"-->T
In a nominally typed language, Synthetic TSM seams reasonable, and one
may even think that would be better to be Synthetic TSM based and have the
metadata simply refer to the "default Synthetic TSM fo that type".
However, since Wivern is structurally typed is not possible to declare another
type T0
that is structurally equivalent to the first one T, and a function
from T0 to T with the name of the wannaby Synthetic TSM.
in this way
myHtml=myConversionFunction ~
.....
would work exactly as a Synthetic TSM, even offering the same exact syntax.
An Analytic TSM is, for the best of my understanding, nothing more than a
generic/polymorphic Synthetic TSM.
Again, thanks to the genericity already present in Wivern, it should be
possible to declare
a parametric type and a generic conversion function.

---
For the third kind:
How is the type quasiquotation defined "in" the language? i know that wivern is
defined from a small core and
I'm quite sure type quasiquotation is not inside it.
I expect that there is some language functionality able to create classes.
I do not see any reason then a normal TSL could not use such mechanism to
create one, from the
semantic perspective, I'm thus assuming the limitation must reside in the type
system.

However, In the same way it was possible to relax this limitation for TSM, I do
not understand
why it can not be relaxed also for TSL, that are somehow just a default TSM
directly contained in the
named type metadata.

A note on mutually recursive types:

I think I understand, also after looking a little in the appendix, that
mutually recursive type annotations
are supported only if generated together, like
type Top= generate(.... A .... B...)
can generate
type Top={
  type A={...uses B...}
  type B={...uses A...}
  }

But is not possible to generate the two independently, like

type A=generate(...B...)
type B=generate(...A...)
can not generate
type A={...uses B...}
type B={...uses A...}

Is this correct? if it is the case, you should address this limitation,
otherwise you should
make it very clear that this example is possible and how,may be the how can be
only in appendix.

As a last important point,
I really do not understand the motivation for the term MACRO
either TSL are macro too, or TSM are not macro.

------------
Minor points

What is a literal for you? there are two school of tough for literals:
both consider 123 a literal, but only second school consider new
String[]{12,4,3+4}
a literal, since 3+4 is an operation that still need to be executed, many
researchers call that
a "specialized initialization syntax" and use the term "literal" only for
"special syntactic forms directly denoting a value"
You should clarify what you mean for literal.

-in pg 2, what is the difference between "~" and "new" ??

-somehow you can create types form "input"
can you simulate inheritance and other object oriented composition mechanisms
like traits
by taking in input source code and type names? if so, you should really EXPAND
on this possibility,
if not, you should explain why is not possible /convinient.
Also, If you can do code composition by TSM, this means that it should be
possible to remove
all code composition from the "more core part" of wivern.

-the id column is marked with an asterix //NO, it is marked with "<"

-circularity in type definition: Standard syntactic contraint can be...
I'm not sure if they can: your "macro" are turing complete, but you also
provide strong limitation of
what types can be used in the input of such macro, so... is not so obvius if
your statement is true,
you may want to explain better why or tone it down.

-for the bibliography, I understand that you put 12 references only to fit the
tight space limitations
of 6 pages, however your work is at the cross of soo many areas of research,
that you should cite much more super relevant work.
If your work is accepted, I suggest we give you a little bit more space to
expand on the bibliography.

============================================================================
                            REVIEWER #4
============================================================================


---------------------------------------------------------------------------
Reviewer's Scores
---------------------------------------------------------------------------

          Technical Content and Accuracy: 6
                Significance of the Work: 6
Appropriate Title, Introduction, and Conclusion: 6
                    Overall Organization: 6
                 Appropriateness for SAC: 5
          Style and Clarity of the Paper: 5
                  Originality of Content: 5
                  OVERALL RECOMMENDATION: 6


---------------------------------------------------------------------------
Comments
---------------------------------------------------------------------------

his paper usefully blurs distinctions between macros and embedded
languages, by allowing type rules to be applied in syntactic macros.
The main contribution of the paper is presenting the basic (good) idea
of doing this, and what it entails. The exemplification with
challenging sub-languages (including HTML) in the experimental Wyvern
language demonstrates one reasonable-looking realization.

Section 5 on formalisms is useful in clarifying particulars, although
at the expense of a bunch of hard-to-decode rules that most readers
will just skim over. I spot-checked only a few; they seem OK.

In addition to the LR-based related work mentioned in sec 6, the
authors might want to also compare to the partially-interpreted "ALL*"
techniques in ANTLR4 (and associated OOPSLA 14 paper).

There are a few typos here and there.