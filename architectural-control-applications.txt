Security applications of architectural control
	Mechanism: control access to the network
		- ensure communications are encrypted
			only give network resource to an encrypted connector type
		- avoid direct object references
			by making sure all network access goes through a framework
			that assigns those references
	Mechanism: control access to a database
		- avoid SQL injection
			by using SQL DSL library
			(see Alex's example in Arch Control directory)
			compare to Google's approach (shares a lot in concept) https://www.usenix.org/sites/default/files/conference/protected-files/sec15_slides_kern.pdf
	Mechanism: control inter-plugin communication
		- avoid leaking private data between plugins
			by not giving them direct access to one another
			(see Darya's NYT example)
			(see Bosch UPA)
	Mechanism: control event dispatch in GUI framework
		- secure click: dispatch click to a component only
			if that component is completely visible and has been
			for a period of time (see Franzie's research)
	Mechanism: control access to file system
		- only provide a logging component (write-only, to one file)
		- or, only provide one directory (sandbox)

Non-security applications of architectural control


Single Scenario (and link to s/w architecture)
	A) plugin system controls inter-plugin communication
		e.g. could demo this using UhU/Bezirk and Android
	B) and database access
	C) and network communication is encrypted
	D) secure button provides access to local disk resources
	E) disk resources provided one directory/file at a time

Architectural views and properties
	A-C and E all involve module view, in terms of resource access
	D) and E are implemented purely in terms of OO
	A-C involve connectors (C&C-like), in some cases with properties
		A) the connector has certain properties that enforce e.g. security rules (see Bosch)
		B) what is the database connector?
		C) what is the network protocol?
		C) how is the network connections configured? (specifics?)
	B and C involve deployment details
		B) where is the database (what node, what directory)?
		C) how are computational nodes allocated onto the network?
	
What is a sub-scenario that can most simply
 - demonstrate architectural control?
 - drive architecture view research?
 - answer: probably B)
 
Plan to get there:
 - get new parser working for some simple common benchmarks from RosettaCode
	http://rosettacode.org/wiki/Special:MostCategories
	compare against http://rosettacode.org/wiki/Special:MostLinkedCategories
		Python; OCaml; Haskell; Standard ML; Scala
		
	> hello world (strings, printing)
		X run working version as JUnit test
		X set up JUnit test for new version
		X parse hello.wyc
		X run hello.wyc
		X parse stdout.wyc
		X run hello with stdout
		X search in standard locations
		parse stdout.wyt
		run hello with typechecked stdout
	- 99 bottles of beer (numbers, loops)
	> fibonacci sequence (arithmetic, recursion)
	- fizzbuzz (logic)
	- A+B (standard input)
	- reverse a string (string manipulation)
	- GCD (iterative mathematical algorithm)
	- Hailstone sequence (beautiful, interesting optimizations)
	- Tokenize a strong (nice demo, good for languagey stuff)
	- Sieve of Eratosthenes (make beautiful and fast!)
	- Execute a system command (important function; relevant to arch control)
	- Towers of Hanoi (nice standard benchmark)
	- sort an integer array (algorithmic)
	- Quine (quoting support)
	- Conway's game of life
	- N queens
	- Complex (good for a datatype)
	- Playing cards (datatype)
	- graphics examples (datatype)
	
 X inspect Abhinav's IL, give feedback, get Ben started translating to it
 - token data structure
 - tokenizer
 - data structure for arithmetic expressions that evaluates
 - parser from tokenizer to arithmetic expressions
 - get new parser working with a simple arithmetic DSL (but clean & beautiful)!
 - implement Abhinav's IL (Abhinav)
 - add capability safety to the whole pipeline (Darya)
 - implement a SQL DSL
 - design & implement a C&C view DSL
 - design & implement a deployment DSL
 - implement a database connector
 - implement a demonstration application
